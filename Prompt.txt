
● Methodical Implementation Plan for Peer Learning Features

  Analysis of Existing Architecture

  The codebase has:
  - StorageModule (lines 444-476): Full data persistence layer with import/export
  - StateManager (lines 482-549): Centralized state management with subscribers
  - DataService: Handles user answers, progress, and class data
  - Chart rendering: Existing Chart.js infrastructure (lines 4071+)
  - Username system: Already supports new/returning students

  Non-Destructive Implementation Strategy

  PHASE 1: Foundation - Extend Data Models (Priority: CRITICAL)

  Goal: Add peer data structures without breaking existing functionality

  1. Extend classData structure (integrate at line ~454)
  // Add to existing getClassData/saveClassData
  classData: {
    users: {
      [username]: {
        answers: {},
        reasons: {},
        attempts: {},
        timestamps: {}
      }
    },
    metadata: {
      totalUsers: 0,
      lastMerge: null
    }
  }
  2. Create PeerDataManager module (insert after StorageModule ~line 477)
    - Aggregates peer responses
    - Calculates distributions
    - Handles consensus thresholds
    - Works alongside existing DataService

  PHASE 2: Dynamic Sizing Module (Priority: HIGHEST - Fixes breaking issues)

  Goal: Prevent UI breakage with real class sizes

  1. Create DynamicSizing module (insert at line ~4070, before chart rendering)
  const DynamicSizing = {
    calculateChartHeight(type, data, config) {
      const peerCount = Object.keys(classData.users || {}).length;
      // Implement scaling logic
    },
    applyCanvasHeight(canvas, height) {
      // Apply calculated height
    }
  }
  2. Integrate with existing chart rendering (modify lines 4088-4090)
    - Replace fixed heights with dynamic calculations
    - Test with simulated large peer counts

  PHASE 3: Peer Visualization Layer (Priority: HIGH)

  Goal: Show peer data without removing existing views

  1. Extend existing renderChart functions (enhance lines 4071-4199)
    - Add peer data overlay option
    - Maintain backward compatibility
  2. Create PeerVisualization module (new module after Charts)
  const PeerVisualization = {
    renderMCQDistribution(questionId, container) {
      // Use existing chart infrastructure
    },
    renderPeerExplanations(questionId, container) {
      // Collapsible peer reasons
    }
  }
  3. Add toggle for peer view (UI enhancement)
    - "Show My Answer" / "Show Peer Responses" toggle
    - Preserves existing single-user view

  PHASE 4: Enhanced Import/Export (Priority: MEDIUM)

  Goal: Enable teacher data merging

  1. Extend existing import/export (enhance lines 465-466)
  // Add to StorageModule
  exportClassData: () => // Export all peer data
  importAndMerge: (files) => // Handle multiple files
  mergeMasterDatabase: (imports) => // Teacher function
  2. Add merge UI (minimal interface)
    - File multi-select for batch import
    - Progress indicator for large merges
    - Conflict resolution (timestamp-based)

  PHASE 5: Teacher Controls (Priority: LOW)

  Goal: Simple teacher management

  1. Create TeacherMode module (new module)
  const TeacherMode = {
    PASSWORD: 'stats2024',
    isActive: false,
    activate(password) {},
    exportGradebook() {},
    resetStudent(username) {}
  }
  2. Add teacher UI elements (conditional rendering)
    - Password prompt
    - Admin panel (hidden by default)
    - Gradebook export button

  Implementation Order & Testing Strategy

  Week 1: Foundation

  1. Backup current index.html
  2. Extend classData structure
  3. Create PeerDataManager
  4. Test: Ensure existing functionality unchanged

  Week 2: Critical Fix

  1. Implement DynamicSizing module
  2. Integrate with chart rendering
  3. Test: Load 50+ simulated peer responses
  4. Verify UI doesn't break

  Week 3: Peer Features

  1. Build PeerVisualization module
  2. Add peer/self toggle
  3. Implement consensus calculations
  4. Test: Peer data aggregation accuracy

  Week 4: Data Management

  1. Enhance import/export
  2. Build merge functionality
  3. Test: Merge 30+ student files
  4. Verify data integrity

  Week 5: Polish

  1. Add TeacherMode
  2. Implement gradebook export
  3. Final integration testing

  Key Integration Points

  1. StorageModule (line 444): Extend with peer data methods
  2. StateManager (line 482): Add peer data to state
  3. Chart rendering (line 4071): Integrate DynamicSizing
  4. Username system (line 2000): Enhance for data recovery
  5. Event delegation: Add handlers for new features

  Non-Destructive Guarantees

  - All new modules use separate namespaces
  - Existing data structures extended, not replaced
  - New features behind feature flags initially
  - Backward compatibility maintained
  - Progressive enhancement approach
  - All changes testable in isolation